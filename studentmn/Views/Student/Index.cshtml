@model List<studentmn.Models.StudentScoreViewModel>
@{
    ViewData["Title"] = "Student Marks Management";
    var subjects = ViewBag.Subjects as List<string> ?? new List<string>();
    var dashboard = ViewBag.Dashboard as studentmn.Models.DashboardViewModel;
    var allClasses = ViewBag.AllClasses as List<string> ?? new List<string>();
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<style>
    /* Giữ nguyên các style hiện có và thêm style mới */
    /* === Filter Section === */
    .filter-section {
        background: #ffffff;
        border: 1px solid #e3e6f0;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 25px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    }

    .filter-row {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
        align-items: flex-end;
    }

    .filter-group label {
        font-weight: 600;
        margin-bottom: 5px;
        color: #495057;
    }

    .filter-actions {
        display: flex;
        gap: 12px;
        align-items: center;
    }

    .btn-primary {
        background: #4e73df;
        border: none;
        font-weight: 500;
        padding: 6px 16px;
        border-radius: 6px;
    }

        .btn-primary:hover {
            background: #375ac2;
        }

    .btn-reset {
        background: #858796;
        color: #fff;
        font-weight: 500;
        padding: 6px 16px;
        border-radius: 6px;
        transition: 0.3s;
    }

        .btn-reset:hover {
            background: #6c757d;
        }

    /* === Table === */
    .table {
        border-collapse: separate;
        border-spacing: 0;
    }

        .table thead th {
            background: #f8f9fc;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 13px;
            border-bottom: 2px solid #dee2e6;
        }

    .table-hover tbody tr:hover {
        background: #f8f9fa;
    }

    .student-info img {
        border-radius: 50%;
        margin-right: 10px;
    }

    /* === Pagination === */
    .pagination-custom {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        gap: 8px;
        flex-wrap: wrap;
    }

    .page-btn {
        padding: 6px 12px;
        border-radius: 6px;
        background: #f1f1f1;
        text-decoration: none;
        color: #333;
        font-weight: 500;
        transition: 0.2s;
    }

        .page-btn:hover {
            background: #4e73df;
            color: white;
        }

        .page-btn.active {
            background: #4e73df;
            color: white;
            font-weight: 600;
        }

    .page-ellipsis {
        padding: 6px 10px;
        color: #999;
    }

    /* === Dashboard Cards === */
    .stats-card {
        border-radius: 12px;
        padding: 20px;
        color: #fff;
        font-weight: 600;
        transition: 0.3s;
    }

        .stats-card h6 {
            font-size: 14px;
            font-weight: 500;
            opacity: 0.9;
        }

        .stats-card h3 {
            font-size: 26px;
            margin-top: 5px;
        }

    .stats-blue {
        background: linear-gradient(45deg, #4e73df, #224abe);
    }

    .stats-green {
        background: linear-gradient(45deg, #1cc88a, #13855c);
    }

    .stats-yellow {
        background: linear-gradient(45deg, #f6c23e, #dda20a);
    }

    .stats-red {
        background: linear-gradient(45deg, #e74a3b, #be2617);
    }

    .stats-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 16px rgba(0,0,0,0.15);
    }

</style>

<div class="container-fluid mt-4">

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="fw-bold">Student Marks Management</h2>
        <div>
            <a class="btn btn-add me-2" asp-action="Create">Add Student</a>
        </div>
    </div>

    <!-- Search và Filter Section -->
    <div class="filter-section">
        <form id="filterForm" method="get" asp-action="Index">
            <input type="hidden" name="page" value="1" />

            <!-- Search -->
            <div class="input-group mb-3">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" class="form-control" name="search" placeholder="Search students by name..."
                       value="@ViewBag.SearchTerm" />
                <button type="submit" class="btn btn-primary">Search</button>
            </div>

            <!-- Filters -->
            <div class="filter-row">
                <div class="filter-group">
                    <label class="form-label">Class</label>
                    <select class="form-select" name="className" onchange="this.form.submit()">
                        <option value="All">All Classes</option>
                        @foreach (var className in allClasses)
                        {
                            <option value="@className" selected="@(ViewBag.SelectedClass == className)">@className</option>
                        }
                    </select>
                </div>

                <div class="filter-group">
                    <label class="form-label">Subject</label>
                    <select class="form-select" name="subjectFilter" id="subjectFilter" onchange="toggleScoreRange()">
                        <option value="All">All Subjects</option>
                        @foreach (var subject in subjects)
                        {
                            <option value="@subject" selected="@(ViewBag.SelectedSubject == subject)">@subject</option>
                        }
                    </select>
                </div>

                <div class="filter-group" id="scoreRangeGroup" style="display: none;">
                    <label class="form-label">Score Range</label>
                    <select class="form-select" name="scoreRange" id="scoreRange">
                        <option value="">All Scores</option>
                        <option value="excellent" selected="@(ViewBag.SelectedScoreRange == "excellent")">Excellent (8.5-10)</option>
                        <option value="good" selected="@(ViewBag.SelectedScoreRange == "good")">Good (6.5-8.4)</option>
                        <option value="average" selected="@(ViewBag.SelectedScoreRange == "average")">Average (5.0-6.4)</option>
                        <option value="weak" selected="@(ViewBag.SelectedScoreRange == "weak")">Weak (0-4.9)</option>
                    </select>
                </div>

                <div class="filter-actions">
                    <button type="submit" class="btn btn-primary">Apply Filters</button>
                    <a href="@Url.Action("Index")" class="btn btn-reset">Reset</a>
                </div>
            </div>
        </form>
    </div>

    <!-- Bảng dữ liệu (giữ nguyên) -->
    <div class="card">
        <div class="card-body p-0">
            <table class="table table-hover mb-0 align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Student</th>
                        @foreach (var subject in subjects)
                        {
                            <th>@subject</th>
                        }
                        <th>Average</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in Model)
                    {
                        <tr>
                            <td class="student-info d-flex align-items-center">
                                <img src="" alt="avatar" />
                                <div>
                                    <strong>@student.FullName</strong><br />
                                    <small>@student.ClassName</small>
                                </div>
                            </td>
                            @foreach (var subject in subjects)
                            {
                                <td class="@GetScoreColorClass(student.SubjectScores[subject] ?? 0)">
                                    @if (student.SubjectScores[subject].HasValue)
                                    {
                                        @student.SubjectScores[subject]?.ToString("0.0")
                                    }
                                    else
                                    {
                                        <text>-</text>
                                    }
                                </td>
                            }
                            <td style="width: 220px;">
                                <div class="d-flex align-items-center">
                                    <span class="me-2 fw-bold">@student.AverageScore.ToString("0.0")</span>
                                    <div class="progress flex-grow-1" style="height: 8px;">
                                        <div class="progress-bar @GetProgressColor(student.AverageScore)"
                                             role="progressbar"
                                             style="width:@(student.AverageScore * 10)%"></div>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <a asp-action="Edit" asp-route-id="@student.StudentId" class="btn btn-sm btn-warning">✎</a>
                                <a asp-action="Details" asp-route-id="@student.StudentId" class="btn btn-sm btn-info">ℹ</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="pagination-custom">
        @{
            int currentPage = (int)ViewBag.CurrentPage;
            int totalPages = (int)ViewBag.TotalPages;
            int maxPagesToShow = 5;
            int startPage = Math.Max(1, currentPage - 1);
            int endPage = Math.Min(totalPages, currentPage + 1);

            if (endPage - startPage + 1 < maxPagesToShow && totalPages >= maxPagesToShow)
            {
                if (startPage == 1)
                {
                    endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);
                }
                else if (endPage == totalPages)
                {
                    startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                }
            }
        }

        @if (currentPage > 1)
        {
            <a href="@Url.Action("Index", new { page = 1, search = ViewBag.SearchTerm, className = ViewBag.SelectedClass, subjectFilter = ViewBag.SelectedSubject, scoreRange = ViewBag.SelectedScoreRange })"
               class="page-btn">&laquo;</a>
        }

        @if (startPage > 1)
        {
            <a href="@Url.Action("Index", new { page = 1, search = ViewBag.SearchTerm, className = ViewBag.SelectedClass, subjectFilter = ViewBag.SelectedSubject, scoreRange = ViewBag.SelectedScoreRange })"
               class="page-btn">1</a>
            <span class="page-ellipsis">...</span>
        }

        @for (int i = startPage; i <= endPage; i++)
        {
            <a href="@Url.Action("Index", new { page = i, search = ViewBag.SearchTerm, className = ViewBag.SelectedClass, subjectFilter = ViewBag.SelectedSubject, scoreRange = ViewBag.SelectedScoreRange })"
               class="page-btn @(i == currentPage ? "active" : "")">@i</a>
        }

        @if (endPage < totalPages)
        {
            <span class="page-ellipsis">...</span>
            <a href="@Url.Action("Index", new { page = totalPages, search = ViewBag.SearchTerm, className = ViewBag.SelectedClass, subjectFilter = ViewBag.SelectedSubject, scoreRange = ViewBag.SelectedScoreRange })"
               class="page-btn">@totalPages</a>
        }

        @if (currentPage < totalPages)
        {
            <a href="@Url.Action("Index", new { page = totalPages, search = ViewBag.SearchTerm, className = ViewBag.SelectedClass, subjectFilter = ViewBag.SelectedSubject, scoreRange = ViewBag.SelectedScoreRange })"
               class="page-btn">&raquo;</a>
        }
    </div>

    <!-- Dashboard (giữ nguyên) -->
    @if (dashboard != null)
    {
        <div class="row mt-4 text-center">
            <div class="col-md-3">
                <div class="stats-card stats-blue shadow-sm">
                    <h6>Total Students</h6>
                    <h3>@dashboard.TotalStudents</h3>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card stats-green shadow-sm">
                    <h6>Average Score</h6>
                    <h3>@dashboard.AverageScore.ToString("0.0") / 10</h3>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card stats-yellow shadow-sm">
                    <h6>Top Student</h6>
                    <h3>@dashboard.TopStudent.ToString("0.0") / 10</h3>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card stats-red shadow-sm">
                    <h6>Low Scores</h6>
                    <h3>@dashboard.LowScores Students</h3>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>

        function toggleScoreRange() {
            const subjectFilter = document.getElementById('subjectFilter');
            const scoreRangeGroup = document.getElementById('scoreRangeGroup');

            if (subjectFilter.value !== 'All') {
                scoreRangeGroup.style.display = 'block';
            } else {
                scoreRangeGroup.style.display = 'none';
                document.getElementById('scoreRange').value = '';
            }
        }

  
        document.addEventListener('DOMContentLoaded', function() {
            toggleScoreRange();

         
            const selectedSubject = '@ViewBag.SelectedSubject';
            if (selectedSubject) {
                document.getElementById('subjectFilter').value = selectedSubject;
                toggleScoreRange();
            }

            const selectedScoreRange = '@ViewBag.SelectedScoreRange';
            if (selectedScoreRange) {
                document.getElementById('scoreRange').value = selectedScoreRange;
            }
        });
    </script>
}

@functions {
    public string GetScoreColorClass(decimal score)
    {
        if (score == 0) return "text-muted";
        if (score >= 8.5m) return "text-success";
        if (score >= 6.5m) return "text-primary";
        if (score >= 5.0m) return "text-warning";
        return "text-danger";
    }

    public string GetProgressColor(decimal score)
    {
        if (score >= 8.5m) return "bg-success";
        if (score >= 6.5m) return "bg-warning";
        if (score >= 5.0m) return "bg-info";
        return "bg-danger";
    }
}